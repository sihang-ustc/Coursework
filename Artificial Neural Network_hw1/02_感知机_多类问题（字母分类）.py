import numpy as np

def sgn(x):
    y = np.where(x >= 0, 1, -1)
    return y

def Perceptron(lr, w, x, d):
    x = np.insert(x, 0, 1)
    out = np.dot(w, x)
    r = d - sgn(out)
    delta_w = lr * r[:, np.newaxis] * x
    
    new_w = w + delta_w
    return new_w

def train_one_epoch(w, x_data, d_data, lr):
    count_right = 0
    count_all = x_data.shape[0]
    for x, d in zip(x_data, d_data):
        w[:] = Perceptron(lr, w, x, d)
    for x, d in zip(x_data, d_data):
        x = np.insert(x, 0 , 1)
        
        out = np.dot(w, x)
        
        if np.array_equal(sgn(out), d):
            count_right += 1
    return count_right / count_all


def change(num, x_data):
    # 随机选择一个索引位置
    indices = np.random.choice(x_data.shape[-1], size=(num, x_data.shape[0]), replace=False)
    y = x_data.copy()
    y[np.arange(y.shape[0]), indices] = -y[np.arange(y.shape[0]), indices]
    return y
        
def test(w, x_data, d_data):
    count_right = 0
    count_all = x_data.shape[0]
    for x, d in zip(x_data, d_data):
        x = np.insert(x, 0 , 1)
        out = np.dot(w, x)
        if np.array_equal(sgn(out), d):
            count_right += 1
    return count_right / count_all
# 样本数据
x_data = np.array([[-1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1],
                   [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
                   [-1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1],
                   [1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1],
                   [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1],
                   [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1],
                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1],
                   [-1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
                   [-1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1],
                   [1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1],
                   [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1],
                   [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1],
                   [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1],
                   [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1],
                   [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
                   [-1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1],
                   [1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1],
                   [-1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1],
                   [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1]])



d_data = np.array([[1, -1, -1, -1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, -1, 1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, 1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, 1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, -1, 1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, 1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, 1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1],
                [1, -1, -1, -1, -1, -1, -1],
                [-1, 1, -1, -1, -1, -1, -1],
                [-1, -1, 1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, 1],
                [-1, -1, -1, -1, -1, 1, -1],
                [-1, -1, -1, -1, 1, -1, -1],
                [-1, -1, -1, 1, -1, -1, -1]])

# 初始化权重
# w = np.random.rand(7, 64)  # [b, w1, w2]
w = np.zeros((7, 64))  # [b, w1, w2]

# 学习率
lr = 1

# 逐个样本进行训练
ep = 0
acc = 0
while acc != 1:
    acc = train_one_epoch(w, x_data, d_data, lr)
    ep += 1
print("原始数据训练轮数: ", ep)





# 修改


# acc = test(w, x2_data, d_data)
# print("after changing one, acc: ", acc)

# x3_data = change(2,x_data)
# acc = test(w, x3_data, d_data)
# print("after changing two, acc: ", acc)
acc = test(w, x_data, d_data)
print("no changing, acc: ", acc)
x2_data = change(1,x_data)
acc = test(w, x2_data, d_data)
print("after changing one, acc: ", acc)
x3_data = change(2,x_data)
acc = test(w, x3_data, d_data)
print("after changing two, acc: ", acc)

print('\n')
print("使用有噪声点的数据进行训练：")
# 逐个样本进行训练
ep = 0
acc = 0
while acc != 1:
    acc = train_one_epoch(w, x2_data, d_data, lr)
    ep += 1
print("有噪声数据的训练轮数: ", ep)
    
acc = test(w, x_data, d_data)
print("no changing, acc: ", acc)
acc = test(w, x2_data, d_data)
print("after changing one, acc: ", acc)
x3_data = change(2,x_data)
acc = test(w, x3_data, d_data)
print("after changing two, acc: ", acc)



